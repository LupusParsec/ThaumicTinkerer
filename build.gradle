buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
         jcenter()
         maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}
        

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

plugins {
    id 'org.ajoberstar.grgit' version '1.7.2'
    id "com.wynprice.cursemaven" version "2.1.1"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'


final commitId

if (hasProperty("grgit")) { // If there's a valid Git repository, get the latest commit ID
    commitId = "${grgit.head().abbreviatedId}"
} else { // Else fall back to NOGIT
    commitId = "NOGIT"
}

repositories {
    mavenCentral()
    maven {
        name = "thiakil"
        url = "http://maven.thiakil.com"
    }
    maven {
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven { // OpenComputers
        name "OpenComputers"
        url "http://maven.cil.li/"
    }
    maven { // TOP
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }
//    maven { // McJty's CompatLayer
//        name 'K4 maven'
//        url "http://maven.k-4u.nl/"
//    }
    maven { // CraftTweaker (aka MineTweaker3)
        name 'jared maven'
        url "http://maven.blamejared.com/"
    }
    //maven { // ModMaven, there is a bunch of stuff on there
    //    name 'ModMaven'
    //    url "http://modmaven.k-4u.nl/"
    //}
    maven {
        url "https://cursemaven.com"
    }
    /*maven { //IC2
        name = "ic2"
        url = "http://maven.ic2.player.to/"
    }*/
    maven { // Redstone Flux
        name 'CoFH Maven'
        url "http://maven.covers1624.net/"
    }
    maven { // Albedo Lights
        url 'http://repo.elytradev.com/'
    }
    maven { url 'https://jitpack.io' }
    maven {
        name "Modmaven"
        url "https://modmaven.dev/"
    }
}


//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


version = "${mc_version}-${mod_version}-${commitId}"
group = "${package_group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${mod_name}"


sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'snapshot', version: '20171003-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
    compile fg.deobf("mezz.jei:jei_1.12.2:${jei_version}:api")
    runtime "mezz.jei:jei_1.12.2:${jei_version}"
    compile "org.apache.httpcomponents:fluent-hc:${httpclient_version}"
    compile fg.deobf("curse.maven:Hwyla-253449:2568751")
    compile fg.deobf("com.github.azanor:Baubles:${baubles_version}")
    compile fg.deobf("opencomputers:OpenComputers:MC${mc_version}:${open_computers_version}")//li.cil.oc:OpenComputers:MC1.12.1-1.7.0.+")
    compile fg.deobf("actually-additions:ActuallyAdditions:${mc_version}:${actually_additions_version}")
    compile fg.deobf("hammer-lib:HammerCore:1.12.2:2.0.4.7")
    
    compile fg.deobf("thaumcraft:Thaumcraft:1.12.2:6.1.BETA26")
    compile fg.deobf("thaumic-additions:ThaumicAdditions:1.12.2:15r")
    compile fg.deobf("cofh:RedstoneFlux:1.12-${redstone_flux_version}")
    compile fg.deobf("slimeknights.mantle:Mantle:1.12-${mantle_version}")
    compile fg.deobf("slimeknights:TConstruct:1.12-${tconstruct_version}")
    compile fg.deobf("curse.maven:botania:2782181")
    compile fg.deobf("curse.maven:cyclops-core:2831241")
    compile fg.deobf("curse.maven:evilcraft:2811267")
    compile fg.deobf("mcjty.theoneprobe:TheOneProbe-1.12:1.12-${probe_version}")//1.1x-1.4.4-55
    compile fg.deobf("curse.maven:thaumic-jei:2705304")
	compile fileTree(dir: 'libs', includes: ['*.jar'])
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the compile fg.deobf(configurations:  'compile fg.deobf' and 'compile fg.deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //compile fg.deobf('com.mod-buildcraft:buildcraft:6.0.8:dev'
    //compile fg.deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    compile 'org.jetbrains:annotations:15.0'
}



jar {
    manifest {
        attributes([
            "Specification-Title": "examplemod",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
